/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Role.PoliceAdminRole;
import Business.Role.HousingAdminRole;
import Business.Role.FacilitiesAdminRole;
import Business.Role.MaintenanceAdminRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import utility.Validate;
import utility.Mail;

/**
 *
 * @author srivaishnaviaekkati
 */
public class ManageEnterpriseAdminJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
     

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public ManageEnterpriseAdminJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.system = system;
       

        populateTable();
        populateNetworkComboBox();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJT.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[3];
                    row[0] = enterprise.getName();
                    row[1] = network.getName();
                    row[2] = userAccount;

                    model.addRow(row);
                }
            }
        }
    }

    private void populateNetworkComboBox(){
             networkJCB.removeAllItems();
        if(system.getNetworkList().size()!=0){                     //Checking whether system contains any network
           for (Network network : system.getNetworkList()) {
                networkJCB.addItem(network);
            }
           
           
        }
        else{
             
             usernameJTF.setEnabled(false);
             passwordJPwdF.setEnabled(false);
             submitJB.setEnabled(false); 
             nameJTF.setEnabled(false);              
             networkJCB.addItem("Please Add Networks");
        }
    }
    
    private void populateEnterpriseComboBox(Network network){
        enterpriseJCB.removeAllItems();
        
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            enterpriseJCB.addItem(enterprise);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJT = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        networkJCB = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        usernameJTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        enterpriseJCB = new javax.swing.JComboBox();
        submitJB = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        nameJTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passwordJPwdF = new javax.swing.JPasswordField();
        backJB = new javax.swing.JButton();
        jLMngEnterAdmin = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        emailTF = new javax.swing.JTextField();

        setBackground(new java.awt.Color(76, 89, 115));
        setMaximumSize(new java.awt.Dimension(750, 750));
        setMinimumSize(new java.awt.Dimension(750, 750));
        setLayout(null);

        enterpriseJT.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        enterpriseJT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Enterprise Name", "Network", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJT);

        add(jScrollPane1);
        jScrollPane1.setBounds(50, 140, 620, 95);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Network");
        add(jLabel1);
        jLabel1.setBounds(90, 270, 52, 17);

        networkJCB.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        networkJCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        networkJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJCBActionPerformed(evt);
            }
        });
        add(networkJCB);
        networkJCB.setBounds(180, 270, 160, 21);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Username");
        add(jLabel2);
        jLabel2.setBounds(410, 270, 60, 30);

        usernameJTF.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        add(usernameJTF);
        usernameJTF.setBounds(490, 270, 136, 21);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Enterprise");
        add(jLabel3);
        jLabel3.setBounds(90, 300, 63, 40);

        enterpriseJCB.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        enterpriseJCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        enterpriseJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterpriseJCBActionPerformed(evt);
            }
        });
        add(enterpriseJCB);
        enterpriseJCB.setBounds(180, 310, 160, 21);

        submitJB.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        submitJB.setText("Submit");
        submitJB.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        submitJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJBActionPerformed(evt);
            }
        });
        add(submitJB);
        submitJB.setBounds(462, 480, 100, 22);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Password");
        add(jLabel4);
        jLabel4.setBounds(410, 310, 57, 30);

        nameJTF.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        add(nameJTF);
        nameJTF.setBounds(180, 350, 160, 21);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Name");
        add(jLabel5);
        jLabel5.setBounds(90, 350, 60, 30);

        passwordJPwdF.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        add(passwordJPwdF);
        passwordJPwdF.setBounds(490, 310, 134, 21);

        backJB.setFont(new java.awt.Font("Optima", 0, 14)); // NOI18N
        backJB.setText("<< Back");
        backJB.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBActionPerformed(evt);
            }
        });
        add(backJB);
        backJB.setBounds(133, 480, 100, 22);

        jLMngEnterAdmin.setFont(new java.awt.Font("Optima", 1, 24)); // NOI18N
        jLMngEnterAdmin.setForeground(new java.awt.Color(255, 255, 255));
        jLMngEnterAdmin.setText("Manage Enterprise Admin");
        add(jLMngEnterAdmin);
        jLMngEnterAdmin.setBounds(220, 60, 269, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Email ID");
        add(jLabel7);
        jLabel7.setBounds(410, 350, 55, 30);

        emailTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTFActionPerformed(evt);
            }
        });
        add(emailTF);
        emailTF.setBounds(490, 350, 136, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void networkJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJCBActionPerformed

        Network network = (Network) networkJCB.getSelectedItem();
        if (network != null){
            populateEnterpriseComboBox(network);
        }
        
        
    }//GEN-LAST:event_networkJCBActionPerformed

    private void submitJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJBActionPerformed
         if(!nameJTF.getText().equals("") && !usernameJTF.getText().isEmpty() && !passwordJPwdF.getText().isEmpty()){
          
        Enterprise enterprise = (Enterprise) enterpriseJCB.getSelectedItem();
        
        String username = usernameJTF.getText();
        String password = String.valueOf(passwordJPwdF.getPassword());
        String name = nameJTF.getText();
        String email = emailTF.getText();
        Employee employee = enterprise.getEmployeeDirectory().createEmployee(name);
       
        if(Validate.validatePassword(password))
        {
        UserAccount account = null;
          if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.ResidentialHall) {
                account = enterprise.getUserAccountDirectory().createUserAccount(username, password,email ,employee, new HousingAdminRole());
            } 
           else if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.Police) {
                account = enterprise.getUserAccountDirectory().createUserAccount(username, password,email ,employee, new PoliceAdminRole());
            }
           else if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.Maintenance) {
                account = enterprise.getUserAccountDirectory().createUserAccount(username, password,email ,employee, new MaintenanceAdminRole());
            }
           else if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.Facility) {
                account = enterprise.getUserAccountDirectory().createUserAccount(username, password,email ,employee, new FacilitiesAdminRole());
            }
          
          if(!Validate.validateEmail(email))
                            {
                                 JOptionPane.showMessageDialog(null,"Enter valid email id ");
                                 emailTF.setText("");
                                return;
                            
                            }
          JOptionPane.showMessageDialog(null, "UserAccount created successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
            usernameJTF.setText("");
            passwordJPwdF.setText("");
            nameJTF.setText("");
            emailTF.setText("");
            populateTable();
            
         }
        else
        {
        
           JOptionPane.showMessageDialog(null,"Please enter valid password");
        
        }
         }
         else{
             JOptionPane.showMessageDialog(null, "Enter all the value", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_submitJBActionPerformed

    private void backJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBActionPerformed
        userProcessContainer.remove(this);
         Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBActionPerformed

    private void emailTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTFActionPerformed

    private void enterpriseJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterpriseJCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterpriseJCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJB;
    private javax.swing.JTextField emailTF;
    private javax.swing.JComboBox enterpriseJCB;
    private javax.swing.JTable enterpriseJT;
    private javax.swing.JLabel jLMngEnterAdmin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameJTF;
    private javax.swing.JComboBox networkJCB;
    private javax.swing.JPasswordField passwordJPwdF;
    private javax.swing.JButton submitJB;
    private javax.swing.JTextField usernameJTF;
    // End of variables declaration//GEN-END:variables
}
